#!/bin/sh
# _____  _                    ___              _____  _____ __   __
#|_   _|(_) _ __   ___       |_ _| _ _        |_   _||_   _|\ \ / /
#  | |  | || '  \ / -_)       | | | ' \         | |    | |   \   / 
#  |_|  |_||_|_|_|\___|      |___||_||_|        |_|    |_|    |_|  
#

TITTY_VERSION='1.0.0'
CONFIG_DIR="${TITTY_CONFIG_DIR:="${XDG_CONFIG_HOME:="$HOME/.config"}"}/titty"
masterlist="${TITTY_MASTERLIST:="$CONFIG_DIR/masterlist"}"

[ -d "$CONFIG_DIR" ] || mkdir -p "$CONFIG_DIR"

# Colors
pr_green="\033[1;32m"
pr_clear="\033[0m"

hms(){
	H="$(($1 / 3600))"
	M="$(($1 % 3600 / 60))"
	S="$(($1 % 60))"
	printf "%s hours, %s minutes, %s seconds" "$H" "$M" "$S"
}

tcheck_tracking(){
	[ ! -s "$masterlist" ] || tail -n1 "$masterlist" | cut -d'|' -f3 | grep -q '^[0-9]\+$' 2> /dev/null
}

tdisp(){
	IFS="|";
	case "$1" in
		'month') FMTSTRING='%m%Y';;
		'year')  FMTSTRING='%Y';;
		'week')	 FMTSTRING='%w%Y';;
		'day')	 FMTSTRING='%d%m%Y';;
		'all') ;;
		*) thelp;;


	esac
	if [ "$(wc -l < "$masterlist")" -gt 0 ]; then
	printf "%s\n" "----------------------------------------------------------------"
	printf "%-25s\t%25s\n" "Tasks ($1)" "Logged hours"
	printf "%s\n" "----------------------------------------------------------------"
	total=0
	while read -r NAME START STOP
	do
		if [ "$1" = 'all' ] || [ "$(date --date=@"$START" +"$FMTSTRING")" -eq "$(date +"$FMTSTRING")" ]
		then
			TIME=$(("$STOP" - "$START"))
			total=$(("$total" + "$TIME"))
			printf  "%-25s\t%25s\n" "$NAME" "$(hms "$TIME")"
		fi 
	done < "$masterlist"
	printf "%s\n" "----------------------------------------------------------------"
	printf "%-25s\t%25s\n" "TOTAL:" "$(hms "$total")"
	else
		printf 'No completed tasks to display\n'
	fi
}


thelp(){
	printf \
"Usage:
${pr_green}titty start [taskname]${pr_clear}
	Start tracking time for a task.

${pr_green}-t, --time [time] [taskname]${pr_clear}
	Start tracking time for a task from some time ago.
	example:
	titty -t 1hour Task23
	titty -t 54sec Task43
	titty --time 15min Task42

${pr_green}titty status${pr_clear}
	Display the time tracked so far for the current task.

${pr_green}titty stop${pr_clear}
	Stop tracking the current task.

${pr_green}titty display [day|week|month|year|all]${pr_clear}
	Display tracked time (default is month).

${pr_green}titty delete [all]${pr_clear}
	Delete the previous task or all tasks.

${pr_green}titty help${pr_clear}
	Display this help text.
Configuration:
	The default configuration files are located in ~/.config/titty/
	This directory can be changed using the ${pr_green}\$TITTY_CONFIG_DIR${pr_clear} environment variable.
"
exit
}

tbackstart(){
	STARTTIME="$(date -d "$(date -d "-$2")" +%s)"
	if tcheck_tracking
	then
		printf "%s|%s" "$1" "$STARTTIME" >> "$masterlist"
		printf "%s\n" "Started at $(date --date=@"$STARTTIME")"
	else
		printf "%s\n" "Time is already being tracked ya doofus!"
	fi

}

tstart(){
	STARTTIME="$(date +%s)"
	if tcheck_tracking
	then
		if [ -z "$1" ]; then
			while [ -z "$task_name" ]; do
				printf 'Task name: '
				read -r task_name
			done
		else
			task_name="$1"
		fi
		printf "%s|%s" "$task_name" "$STARTTIME" >> "$masterlist"
		printf "%s\n" "Started at $(date --date=@"$STARTTIME")"
	else
		printf "%s\n" "Time is already being tracked ya doofus!"
	fi
}

tstop(){
	if ! tcheck_tracking
	then
		STOPTIME="$(date +%s)"
		tmp="$(mktemp)"
		tail -n1 "$CONFIG_DIR"/masterlist > "$tmp"
		IFS="|" read -r NAME STARTTIME < "$tmp"
		rm "$tmp"
		printf "%s\n" "|$STOPTIME" >> "$masterlist"
		TIMETAKEN=$(("$STOPTIME" - "$STARTTIME"))
		printf "%s\n" "Stopped - $(hms $TIMETAKEN) tracked for $NAME"
	else
		printf "%s\n" "You never started tracking the time, dummy!"
	fi
}

tstatus(){
	if ! tcheck_tracking
	then
		CURRENT_TIME="$(date +%s)"
		tmp="$(mktemp)"
		tail -n1 "$CONFIG_DIR"/masterlist > "$tmp"
		IFS="|" read -r NAME STARTTIME < "$tmp"
		rm "$tmp"
		TIMETAKEN=$(("$CURRENT_TIME" - "$STARTTIME"))
		printf "%s\n" "$(hms $TIMETAKEN) tracked for $NAME"
	else
		printf "%s\n" "You never started tracking the time, dummy!"
	fi
}

tdelete(){
	if [ -s "$masterlist" ]; then
		case "$1" in
			'all')
				: > "$masterlist"
				printf 'Deleted all tasks\n'
				;;
			*)
				printf 'Deleted '
				tail -n1 "$masterlist" | cut -d'|' -f1
				sed -i '$d' "$masterlist"
				;;
		esac
	else
		printf '%s\n' 'No tasks to delete'
	fi
	exit
}

t_error_msg(){
	if [ -n "$1" ]; then
		printf "'%s' %s\n\t${pr_green}%s ${pr_clear}%s\n"\
			"$1" "is an invalid option"\
			"titty -h" "for more information"
	else
		printf "%s\n\t${pr_green}%s ${pr_clear}%s\n"\
			"Invalid option"\
			"titty -h" "for more information"
	fi
	exit
}

t_args(){
	while [ "$1" ]; do
		case "$1" in
			'-h'|'--help')
				thelp
				;;
			'-v'|'--version')
				echo "$TITTY_VERSION"
				exit
				;;
			'-d'|'--delete')
				tdelete "$2"
				;;
			-*)
				t_error_msg "$1"
				;;
			*)
				t_error_msg
				;;
		esac
		shift
	done
}

case "$1" in
	'start')
		task_name="$(echo "$*" | cut -d' ' -f2-)"
		tstart "$task_name"
	;;
	'-t'|'--time')
		task_name="$(echo "$*" | cut -d' ' -f3-)"
		time="$2"
		tbackstart "$task_name" "$time"
	;;

	'stop')
		tstop
	;;

	'display')
			case "$#" in
				'1') tdisp 'month' ;;
				'2') tdisp "$2" ;;
				*) 	 thelp;;
			esac
	;;
	'status')
		tstatus;;
	*)
		t_args "$@";;
esac

